function search(projDef, container, map) {
    container.empty();
    let layer;
    let schema;
    let geometryType;
    projDef.forEach(function (item) {
        item.layers.forEach(function (itemLayer) {
            if (itemLayer.active) {
                layer = getLayerByName(itemLayer.name, map);
                schema = item.schema;
                schema.Properties.forEach(function (itemProperty) {
                    if (itemProperty.Name === item.schema.DefaultGeometryPropertyName) {
                        geometryType = [null, 'Point', 'LineString', 'Polygon'][itemProperty.GeometryTypes];
                    }
                });
            }
        });
    });

    $(`<div class="w3-panel w3-leftbar w3-border-blue crud-info ">
    <p>Pretra≈æi ${schema.Name}<br>Odaberi svojstvo iz liste, potom klikni na vrijednost.</p></div>`)
        .appendTo(container);


    let searchSelect = $(`<select id = "search-select" class="w3-select w3-border">`);
    schema.Properties.forEach(function (itemProperty) {
        let propertyDescription = itemProperty.Name;
        if (!itemProperty.IsAutoGenerated && itemProperty.Name !== schema.DefaultGeometryPropertyName) {
            if (itemProperty.Description !== "") {
                propertyDescription = itemProperty.Description.split(',')[0];
            }
            searchSelect.append(new Option(propertyDescription, itemProperty.Name));
        }
    });
    searchSelect.appendTo(container);
    let searchContainer = $(`<div id="search-container"></div>`);
    searchSelect.change(function () {
        Select.getFeatures().clear();
        searchContainer.empty();
        let property = $(this).val();
        let distinct = [];
        layer.getSource().getFeatures().forEach(function (feature) {
            let value = feature.get(property);
            let flag = true;
            distinct.forEach(function (itemDistinct) {
                if (itemDistinct.value === value) {
                    itemDistinct.count++;
                    flag = false;
                }
            });
            if (flag) distinct.push({
                value: value,
                count: 1
            });
        });
        distinct.forEach(function (item) {
            $(`<p class="search-label">${item.value} (${item.count})</p>`).appendTo(searchContainer);
        });
        $('.search-label').on('click', container, function () {
            Select.getFeatures().clear();
            $(this).addClass('active').siblings().removeClass('active');
            let value = $(this).text().split(' (')[0];
            if (value === 'null') value = null;
            let features = layer.getSource().getFeatures();
            var extent = ol.extent.createEmpty();
            features.forEach(function (feature) {
                if (feature.get(property) == value) {
                    ol.extent.extend(extent, feature.getGeometry().getExtent());
                    Select.getFeatures().push(feature);
                }
            });
            if (isFinite(extent[0])) {
                map.getView().fit(extent, {
                    maxZoom: 14,
                    duration: 300
                });
            }
        });
    });
    searchContainer.appendTo(container);

}